import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { supabaseServiceRole } from '$lib/server/supabaseServiceRoleClient';
import type { User } from '$lib/types';

// POST /user: Create a new user
export const POST: RequestHandler = async ({ request }) => {
  try {
    const body = await request.json();
    const { name } = body as { name?: string };

    if (!name || typeof name !== 'string' || name.trim() === '') {
      return json({ error: 'Name is required and must be a non-empty string.' }, { status: 400 });
    }

    // Insert the new user. The balance defaults to 100 and timestamps are auto-generated by PostgreSQL.
    // The trigger 'after_user_insert_create_initial_transaction' will create the initial transaction.
    const { data: newUser, error: insertError } = await supabaseServiceRole
      .from('users')
      .insert({ name: name.trim() })
      .select('id, name, balance')
      .single(); // Use .single() because we expect one row back after insert with select

    if (insertError) {
      console.error('Supabase insert error:', insertError);
      // Handle potential specific errors, e.g., if name had a UNIQUE constraint that was violated (though not in current schema)
      // For now, a generic 500, but you might want more specific error handling based on insertError.code
      return json({ error: 'Failed to create user.', details: insertError.message }, { status: 500 });
    }

    if (!newUser) {
        return json({ error: 'Failed to create user or retrieve created user data.' }, { status: 500 });
    }

    // As per API_SPEC.md, the response for user creation returns id, name, and balance (default 100)
    // Transaction history is not included here.
    return json(newUser as User, { status: 201 });

  } catch (e) {
    if (e instanceof SyntaxError) { // Catches errors from request.json() if body is not valid JSON
        return json({ error: 'Invalid JSON in request body.' }, { status: 400 });
    }
    console.error('Server error:', e);
    return json({ error: 'An unexpected server error occurred.' }, { status: 500 });
  }
};

// GET /user: Return a list of all users with their balances
export const GET: RequestHandler = async () => {
  try {
    const { data: users, error: fetchError } = await supabaseServiceRole
      .from('users')
      .select('id, name, balance'); // Select only id, name, and balance as per API_SPEC.md

    if (fetchError) {
      console.error('Supabase fetch error:', fetchError);
      return json({ error: 'Failed to retrieve users.', details: fetchError.message }, { status: 500 });
    }

    return json(users as User[] || [], { status: 200 });

  } catch (e) {
    console.error('Server error:', e);
    return json({ error: 'An unexpected server error occurred.' }, { status: 500 });
  }
};